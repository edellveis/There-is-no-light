Звісно, ось кілька простих задач на JavaScript для практики, схожих на ті, які ви вже робили:

Задача 1: Перевірка числа на парність
Напиши функцію isEven, яка приймає одне число (параметр number) і повертає true, якщо число парне, і false в іншому випадку.

javascript
Копіювати код
function isEven(number) {
    // Твій код тут
}

// Перевірка коректності роботи функції
console.log(isEven(4)); // true
console.log(isEven(7)); // false
console.log(isEven(0)); // true
console.log(isEven(-2)); // true



Задача 2: Перевірка на наявність слова
Напиши функцію containsWord, яка приймає два рядки (параметри message і word) і повертає true, якщо message містить word, і false в іншому випадку.

javascript
Копіювати код
function containsWord(message, word) {
    // Твій код тут
}

// Перевірка коректності роботи функції
console.log(containsWord("Hello, world!", "world")); // true
console.log(containsWord("JavaScript is awesome", "python")); // false
console.log(containsWord("I love programming", "love")); // true
console.log(containsWord("Functional programming", "functional")); // true
Задача 3: Обчислення середнього значення
Напиши функцію calculateAverage, яка приймає масив чисел (параметр numbers) і повертає середнє значення цих чисел.

javascript
Копіювати код
function calculateAverage(numbers) {
    // Твій код тут
}

// Перевірка коректності роботи функції
console.log(calculateAverage([1, 2, 3, 4, 5])); // 3
console.log(calculateAverage([10, 20, 30, 40, 50])); // 30
console.log(calculateAverage([2, 4, 6, 8, 10])); // 6
console.log(calculateAverage([7, 14, 21, 28, 35])); // 21
Задача 4: Форматування імені
Напиши функцію formatName, яка приймає рядок (параметр name) і повертає цей рядок, де перша літера велика, а всі інші малі.

javascript
Копіювати код
function formatName(name) {
    // Твій код тут
}

// Перевірка коректності роботи функції
console.log(formatName("john")); // "John"
console.log(formatName("MARY")); // "Mary"
console.log(formatName("pETEr")); // "Peter"
console.log(formatName("AnNA")); // "Anna"
Задача 5: Порівняння двох чисел
Напиши функцію compareNumbers, яка приймає два числа (параметри a і b) і повертає рядок "greater", якщо a більше за b, "less", якщо a менше за b, і "equal", якщо a дорівнює b.

javascript
Копіювати код
function compareNumbers(a, b) {
    // Твій код тут
}

// Перевірка коректності роботи функції
console.log(compareNumbers(10, 5)); // "greater"
console.log(compareNumbers(3, 7)); // "less"
console.log(compareNumbers(4, 4)); // "equal"
console.log(compareNumbers(9, 2)); // "greater"
console.log(compareNumbers(1, 1)); // "equal"
Сподіваюся, ці задачі допоможуть вам попрактикуватися та покращити свої навички програмування на JavaScript.

сформуй ще 
ChatGPT
Звісно, ось ще кілька задач для практики на JavaScript:

Задача 6: Перевірка на високосний рік
Напиши функцію isLeapYear, яка приймає рік (параметр year) і повертає true, якщо рік є високосним, і false в іншому випадку.

javascript
Копіювати код
function isLeapYear(year) {
    // Твій код тут
}

// Перевірка коректності роботи функції
console.log(isLeapYear(2000)); // true
console.log(isLeapYear(1900)); // false
console.log(isLeapYear(2020)); // true
console.log(isLeapYear(2021)); // false
Задача 7: Обчислення факторіалу
Напиши функцію factorial, яка приймає число (параметр n) і повертає факторіал цього числа. Факторіал числа n обчислюється як 1 * 2 * 3 * ... * n.

javascript
Копіювати код
function factorial(n) {
    // Твій код тут
}

// Перевірка коректності роботи функції
console.log(factorial(5)); // 120
console.log(factorial(3)); // 6
console.log(factorial(0)); // 1
console.log(factorial(7)); // 5040
Задача 8: Обчислення суми елементів масиву
Напиши функцію sumArray, яка приймає масив чисел (параметр numbers) і повертає суму всіх елементів масиву.

javascript
Копіювати код
function sumArray(numbers) {
    // Твій код тут
}

// Перевірка коректності роботи функції
console.log(sumArray([1, 2, 3, 4, 5])); // 15
console.log(sumArray([10, 20, 30, 40, 50])); // 150
console.log(sumArray([2, 4, 6, 8, 10])); // 30
console.log(sumArray([7, 14, 21, 28, 35])); // 105
Задача 9: Повернення максимального числа з масиву
Напиши функцію findMax, яка приймає масив чисел (параметр numbers) і повертає найбільше число з цього масиву.

javascript
Копіювати код
function findMax(numbers) {
    // Твій код тут
}

// Перевірка коректності роботи функції
console.log(findMax([1, 2, 3, 4, 5])); // 5
console.log(findMax([10, 20, 30, 40, 50])); // 50
console.log(findMax([2, 4, 6, 8, 10])); // 10
console.log(findMax([7, 14, 21, 28, 35])); // 35
Задача 10: Перевірка паліндрому
Напиши функцію isPalindrome, яка приймає рядок (параметр str) і повертає true, якщо рядок є паліндромом, і false в іншому випадку. Паліндром — це рядок, який читається однаково з обох кінців.

javascript
Копіювати код
function isPalindrome(str) {
    // Твій код тут
}

// Перевірка коректності роботи функції
console.log(isPalindrome("racecar")); // true
console.log(isPalindrome("hello")); // false
console.log(isPalindrome("madam")); // true
console.log(isPalindrome("level")); // true
console.log(isPalindrome("world")); // false
Сподіваюся, ці задачі допоможуть вам покращити свої навички програмування на JavaScript. Удачі!

Можна простіщі задачки?
ChatGPT
Звісно, ось кілька простіших задач на JavaScript для практики:

Задача 1: Перевірка на позитивне число
Напиши функцію isPositive, яка приймає число (параметр number) і повертає true, якщо число позитивне, і false в іншому випадку.

javascript
Копіювати код
function isPositive(number) {
    // Твій код тут
}

// Перевірка коректності роботи функції
console.log(isPositive(5)); // true
console.log(isPositive(-3)); // false
console.log(isPositive(0)); // false

Задача 3: Перевірка на пустий рядок
Напиши функцію isEmptyString, яка приймає рядок (параметр str) і повертає true, якщо рядок порожній, і false в іншому випадку.

javascript
Копіювати код
function isEmptyString(str) {
    // Твій код тут
}

// Перевірка коректності роботи функції
console.log(isEmptyString("")); // true
console.log(isEmptyString("Hello")); // false
console.log(isEmptyString(" ")); // false
Задача 4: Додавання двох чисел
Напиши функцію add, яка приймає два числа (параметри a і b) і повертає їх суму.

javascript
Копіювати код
function add(a, b) {
    // Твій код тут
}

// Перевірка коректності роботи функції
console.log(add(2, 3)); // 5
console.log(add(10, 20)); // 30
console.log(add(-5, 5)); // 0
Задача 5: Перевірка довжини рядка
Напиши функцію isLongerThan, яка приймає два параметри: рядок str і число length. Функція повинна повертати true, якщо довжина рядка більше length, і false в іншому випадку.

javascript
Копіювати код
function isLongerThan(str, length) {
    // Твій код тут
}

// Перевірка коректності роботи функції
console.log(isLongerThan("Hello", 3)); // true
console.log(isLongerThan("Hi", 5)); // false
console.log(isLongerThan("JavaScript", 10)); // false
Задача 6: Перетворення числа в рядок
Напиши функцію numberToString, яка приймає число (параметр num) і повертає його як рядок.

javascript
Копіювати код
function numberToString(num) {
    // Твій код тут
}

// Перевірка коректності роботи функції
console.log(numberToString(123)); // "123"
console.log(numberToString(0)); // "0"
console.log(numberToString(-45)); // "-45"
Задача 7: Перевірка початку рядка
Напиши функцію startsWithA, яка приймає рядок (параметр str) і повертає true, якщо рядок починається з літери "A", і false в іншому випадку.

javascript
Копіювати код
function startsWithA(str) {
    // Твій код тут
}

// Перевірка коректності роботи функції
console.log(startsWithA("Apple")); // true
console.log(startsWithA("Banana")); // false
console.log(startsWithA("avocado")); // false
Задача 8: Перевірка наявності числа у масиві
Напиши функцію containsNumber, яка приймає масив чисел (параметр numbers) і число (параметр num). Функція повинна повертати true, якщо число присутнє у масиві, і false в іншому випадку.

javascript
Копіювати код
function containsNumber(numbers, num) {
    // Твій код тут
}

// Перевірка коректності роботи функції
console.log(containsNumber([1, 2, 3, 4, 5], 3)); // true
console.log(containsNumber([10, 20, 30, 40], 25)); // false
console.log(containsNumber([7, 14, 21, 28], 14)); // true
Задача 9: Перетворення рядка в масив слів
Напиши функцію stringToWords, яка приймає рядок (параметр str) і повертає масив слів, розділених пробілами.

javascript
Копіювати код
function stringToWords(str) {
    // Твій код тут
}

// Перевірка коректності роботи функції
console.log(stringToWords("Hello world")); // ["Hello", "world"]
console.log(stringToWords("JavaScript is awesome")); // ["JavaScript", "is", "awesome"]
console.log(stringToWords("I love coding")); // ["I", "love", "coding"]
Задача 10: Перевірка числа на непарність
Напиши функцію isOdd, яка приймає число (параметр number) і повертає true, якщо число непарне, і false в іншому випадку.

javascript
Копіювати код
function isOdd(number) {
    // Твій код тут
}

// Перевірка коректності роботи функції
console.log(isOdd(5)); // true
console.log(isOdd(8)); // false
console.log(isOdd(0)); // false
console.log(isOdd(-3)); // true

Задача 1: Перевірка на нуль
Напиши функцію isZero, яка приймає число (параметр number) і повертає true, якщо число дорівнює нулю, і false в іншому випадку.

javascript
Копіювати код
function isZero(number) {
    return number === 0;
}

// Перевірка коректності роботи функції
console.log(isZero(0)); // true
console.log(isZero(5)); // false
console.log(isZero(-3)); // false
console.log(isZero(0.0)); // true
Задача 2: Привітання на основі часу доби
Напиши функцію greetTime, яка приймає годину (параметр hour) і повертає "Good morning" якщо година менша за 12, "Good afternoon" якщо година менша за 18, і "Good evening" в іншому випадку.

javascript
Копіювати код
function greetTime(hour) {
    if (hour < 12) {
        return "Good morning";
    } else if (hour < 18) {
        return "Good afternoon";
    } else {
        return "Good evening";
    }
}

// Перевірка коректності роботи функції
console.log(greetTime(10)); // "Good morning"
console.log(greetTime(14)); // "Good afternoon"
console.log(greetTime(20)); // "Good evening"
console.log(greetTime(5)); // "Good morning"
Задача 3: Перевірка числа на додатність
Напиши функцію isPositive, яка приймає число (параметр number) і повертає true, якщо число додатнє, і false в іншому випадку.

javascript
Копіювати код
function isPositive(number) {
    return number > 0;
}

// Перевірка коректності роботи функції
console.log(isPositive(5)); // true
console.log(isPositive(-3)); // false
console.log(isPositive(0)); // false
console.log(isPositive(7)); // true
Задача 4: Перевірка рядка на наявність пробілу
Напиши функцію containsSpace, яка приймає рядок (параметр str) і повертає true, якщо рядок містить пробіл, і false в іншому випадку.

javascript
Копіювати код
function containsSpace(str) {
    return str.includes(' ');
}

// Перевірка коректності роботи функції
console.log(containsSpace("Hello world")); // true
console.log(containsSpace("NoSpaceHere")); // false
console.log(containsSpace(" ")); // true
console.log(containsSpace("")); // false
Задача 5: Перевірка числа на від'ємність
Напиши функцію isNegative, яка приймає число (параметр number) і повертає true, якщо число від'ємне, і false в іншому випадку.

javascript
Копіювати код
function isNegative(number) {
    return number < 0;
}

// Перевірка коректності роботи функції
console.log(isNegative(-5)); // true
console.log(isNegative(3)); // false
console.log(isNegative(0)); // false
console.log(isNegative(-1)); // true
Задача 6: Привітання користувача з конкретним ім ям
Напиши функцію greetUser, яка приймає рядок (параметр name) і повертає рядок "Hi, name!".

javascript
Копіювати код
function greetUser(name) {
    return `Hi, ${name}!`;
}

// Перевірка коректності роботи функції
console.log(greetUser("John")); // "Hi, John!"
console.log(greetUser("Alice")); // "Hi, Alice!"
console.log(greetUser("Bob")); // "Hi, Bob!"
Задача 7: Перевірка наявності символу "A"
Напиши функцію containsA, яка приймає рядок (параметр str) і повертає true, якщо рядок містить літеру "A" (в будь-якому регістрі), і false в іншому випадку.

javascript
Копіювати код
function containsA(str) {
    return str.toUpperCase().includes('A');
}

// Перевірка коректності роботи функції
console.log(containsA("Apple")); // true
console.log(containsA("Banana")); // true
console.log(containsA("Cherry")); // false
console.log(containsA("avocado")); // true
Задача 8: Перетворення числа в абсолютне значення
Напиши функцію absoluteValue, яка приймає число (параметр number) і повертає його абсолютне значення.

javascript
Копіювати код
function absoluteValue(number) {
    return Math.abs(number);
}

// Перевірка коректності роботи функції
console.log(absoluteValue(-5)); // 5
console.log(absoluteValue(3)); // 3
console.log(absoluteValue(0)); // 0
console.log(absoluteValue(-10)); // 10
Задача 9: Перевірка на пустий масив
Напиши функцію isEmptyArray, яка приймає масив (параметр arr) і повертає true, якщо масив порожній, і false в іншому випадку.

javascript
Копіювати код
function isEmptyArray(arr) {
    return arr.length === 0;
}

// Перевірка коректності роботи функції
console.log(isEmptyArray([])); // true
console.log(isEmptyArray([1, 2, 3])); // false
console.log(isEmptyArray(["a", "b", "c"])); // false
console.log(isEmptyArray([0])); // false
Задача 10: Перетворення рядка в верхній регістр
Напиши функцію toUpperCase, яка приймає рядок (параметр str) і повертає цей рядок у верхньому регістрі.

javascript
Копіювати код
function toUpperCase(str) {
    return str.toUpperCase();
}

// Перевірка коректності роботи функції
console.log(toUpperCase("hello")); // "HELLO"
console.log(toUpperCase("world")); // "WORLD"
console.log(toUpperCase("JavaScript")); // "JAVASCRIPT"
console.log(toUpperCase("coding")); // "CODING"
(https://code.mu/ru/javascript/tasker/stager/)
...........................................JS-m3.....................................................
Створи код функції calculateTotalPrice(order) так, щоб вона повертала загальну суму чисел в масиві order. Використай цикл for...of для перебору масиву.

Оголошена функція calculateTotalPrice(order)
Виклик функції calculateTotalPrice([12, 85, 37, 4]) повертає 138
Виклик функції calculateTotalPrice([164, 48, 291]) повертає 503
Виклик функції calculateTotalPrice([412, 371, 94, 63, 176]) повертає 1116
Виклик функції calculateTotalPrice([]) повертає 0
Виклик функції calculateTotalPrice() з випадковим масивом чисел повертає правильну суму
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Функція checkStorage(storage, item) приймає два параметри:

storage - масив рядків, що описує доступні товари на складі
item - рядок з назвою товара, наявність якого потрібно перевірити
Доповни код функції таким чином, щоб вона перевіряла, чи присутній такий товар в масиві storage і повертала:

рядок "<item> is available to order!", де item - це назва товара, якщо товар було знайдено
рядок "Sorry! We are out of stock!", якщо такого товара немає в масиві
Зроби так, щоб пошук за імям товару був незалежний від регістру, тобто наприклад "plum" і "pLuM" мають бути знайдені у масиві ["apple", "plum", "pear"].

Оголошена функція checkStorage(storage, item)
Виклик checkStorage(["apple", "plum", "pear"], "plum") повертає "plum is available to order!"
Виклик checkStorage(["apple", "plum", "pear"], "pLuM") повертає "plum is available to order!"
Виклик checkStorage(["apple", "plum", "pear"], "pear") повертає "pear is available to order!"
Виклик checkStorage(["apple", "plum", "pear"], "pEAr") повертає "pear is available to order!"
Виклик checkStorage(["apple", "plum", "pear"], "orange") повертає "Sorry! We are out of stock!"
Виклик checkStorage(["apple", "plum", "pear"], "carrot") повертає "Sorry! We are out of stock!"
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Перед розвязанням цієї задачі варто зазначити, що таке спільні елементи. Спільними елементами масивів називають ті елементи, які присутні у всіх масивах.

Наприклад, у двох масивах [1, 3, 5] і [0, 8, 5, 3] спільними будуть числа 3 і 5, оскільки вони присутні в обох вхідних масивах. А числа 0, 1 і 8 присутні тільки в одному з масивів.

Функція getCommonElements(array1, array2), приймає два масиви (array1 та array2) довільної довжини в якості параметрів.

Доповни код функції:

Створи порожній масив для зберігання нового масиву.
Використай цикл for для ітерації кожного елемента у array1.
У тілі циклу перевір, чи поточний елемент існує у array2 за допомогою методу includes.
Якщо він існує, то додай елемент до нового масиву.
Поверни наповнений масив спільних елементів як результат роботи функції.
Оголошена функція getCommonElements(array1, array2)
Виклик getCommonElements([1, 2, 3], [2, 4]) повертає [2]
Виклик getCommonElements([1, 2, 3], [2, 1, 17, 19]) повертає [1, 2]
Виклик getCommonElements([24, 12, 27, 3], [12, 8, 3, 36, 27]) повертає [12, 27, 3]
Виклик getCommonElements([10, 20, 30, 40], [4, 30, 17, 10, 40]) повертає [10, 30, 40]
Виклик getCommonElements([1, 2, 3], [10, 20, 30]) повертає []
Виклик функції getCommonElements() з випадковими двома масивами повертає правильний масив
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Функція getEvenNumbers(start, end) має два параметри start та end, які є цілими числами. Доповни код функції так, щоб вона повертала масив усіх парних чисел від start до end. Якщо жодного парного числа немає, то масив має бути пустим. Парним вважається число, яке ділиться на 2 без остачі (10 % 2 === 0). Використовуй цикл for.

Оголошена функція getEvenNumbers(start, end)
Виклик функції getEvenNumbers(2, 5) повертає [2, 4]
Виклик функції getEvenNumbers(3, 11) повертає [4, 6, 8, 10]
Виклик функції getEvenNumbers(6, 12) повертає [6, 8, 10, 12]
Виклик функції getEvenNumbers(8, 8) повертає [8]
Виклик функції getEvenNumbers(7, 7) повертає []
Виклик функції getEvenNumbers() з випадковими start і end повертає правильний масив
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Функція calculateTotalPrice(order) приймає один параметр order - масив чисел. Доповни функцію так, щоб вона повертала загальну суму елементів з масиву order.

Оголошена функція calculateTotalPrice(order)
Виклик функції calculateTotalPrice([12, 85, 37, 4]) повертає 138
Виклик функції calculateTotalPrice([164, 48, 291]) повертає 503
Виклик функції calculateTotalPrice([412, 371, 94, 63, 176]) повертає 1116
Виклик функції calculateTotalPrice() з випадковим масивом повертає правильне значення
.........................................................Js-dz-m3..............................................................................
Перш, ніж розв’язувати задачу, давай визначимося із новим терміном!

Термін slug — це зрозумілий людині унікальний ідентифікатор, який використовується у веб розробці для створення читабельних URL-адрес.

Наприклад, замість того, щоб користувач побачив в адресному рядку mysite.com/posts/1q8fh74tx, можна зробити slug із назви статті. У результаті адреса буде приємнішою для сприйняття: mysite.com/posts/arrays-for-begginers.



Slug — це завжди рядок у нижньому регістрі, слова якого розділені тире.

З цим розібралися? А тепер давай нарешті виконувати задачу!



Напиши функцію slugify(title), яка приймає заголовок статті, параметр title і повертає slug, створений із цього рядка.

Значенням параметра title будуть рядки, слова яких розділені лише пробілами.
Усі символи slug повинні бути в нижньому регістрі.
Усі слова slug повинні бути розділені тире.
Візьми код нижче і встав після оголошення своєї функції для перевірки коректності її роботи. У консоль будуть виведені результати її роботи.



console.log(slugify("Arrays for begginers")); // "arrays-for-begginers"
console.log(slugify("English for developer")); // "english-for-developer"
console.log(slugify("Ten secrets of JavaScript")); // "ten-secrets-of-javascript"
console.log(slugify("How to become a JUNIOR developer in TWO WEEKS")); // "how-to-become-a-junior-developer-in-two-weeks"

Залиш цей код для перевірки ментором.



На що буде звертати увагу ментор при перевірці:



Оголошена функція slugify(title)
Виклик slugify("Arrays for begginers") повертає "arrays-for-begginers"
Виклик slugify("English for developer") повертає "english-for-developer"
Виклик slugify("Ten secrets of JavaScript") повертає "ten-secrets-of-javascript"
Виклик slugify("How to become a JUNIOR developer in TWO WEEKS") повертає "how-to-become-a-junior-developer-in-two-weeks"


Задача 2. Композиція масивів



Виконуй це завдання у файлі task-2.js


Напиши функцію під назвою makeArray, яка приймає три параметри: firstArray (масив), secondArray (масив) і maxLength (число). Функція повинна створювати новий масив, який містить усі елементи з firstArray, а потім усі елементи з secondArray.

Якщо кількість елементів у новому масиві перевищує maxLength, функція повинна повернути копію масиву з довжиною maxLength елементів.
В іншому випадку функція повинна повернути весь новий масив.


Візьми код нижче і встав після оголошення своєї функції для перевірки коректності її роботи. У консоль будуть виведені результати її роботи.



console.log(makeArray(["Mango", "Poly"], ["Ajax", "Chelsea"], 3)); // ["Mango", "Poly", "Ajax"]
console.log(makeArray(["Mango", "Poly", "Houston"], ["Ajax", "Chelsea"], 4)); // ["Mango", "Poly", "Houston", "Ajax"]
console.log(makeArray(["Mango"], ["Ajax", "Chelsea", "Poly", "Houston"], 3)); // ["Mango", "Ajax", "Chelsea"]
console.log(makeArray(["Earth", "Jupiter"], ["Neptune", "Uranus"], 2)); // ["Earth", "Jupiter"]
console.log(makeArray(["Earth", "Jupiter"], ["Neptune", "Uranus"], 4)); // ["Earth", "Jupiter", "Neptune", "Uranus"]
console.log(makeArray(["Earth", "Jupiter"], ["Neptune", "Uranus", "Venus"], 0)); // []

Залиш цей код для перевірки ментором.



На що буде звертати увагу ментор при перевірці:



Оголошена функція makeArray(firstArray, secondArray, maxLength)
Виклик makeArray(["Mango", "Poly"], ["Ajax", "Chelsea"], 3) повертає ["Mango", "Poly", "Ajax"]
Виклик makeArray(["Mango", "Poly", "Houston"], ["Ajax", "Chelsea"], 4) повертає ["Mango", "Poly", "Houston", "Ajax"]
Виклик makeArray(["Mango"], ["Ajax", "Chelsea", "Poly", "Houston"], 3) повертає ["Mango", "Ajax", "Chelsea"]
Виклик makeArray(["Earth", "Jupiter"], ["Neptune", "Uranus"], 2) повертає ["Earth", "Jupiter"]
Виклик makeArray(["Earth", "Jupiter"], ["Neptune", "Uranus"], 4) повертає ["Earth", "Jupiter", "Neptune", "Uranus"]
Виклик makeArray(["Earth", "Jupiter"], ["Neptune", "Uranus", "Venus"], 0) повертає []
Виклик функції makeArray() з випадковими масивами і випадковим числом повертає правильний масив


Задача 3. Фільтрація масиву чисел



Виконуй це завдання у файлі task-3.js


Напиши функцію filterArray(numbers, value), яка приймає масив чисел (numbers) та значення (value) як параметри. Функція повинна повертати новий масив лише тих чисел із масиву numbers, які більші за значення value.



Усередині функції:

Створи порожній масив, у який будеш додавати підходящі числа.
Використай цикл для ітерації кожного елемента масиву numbers.
Використовуй умовний оператор if усередині циклу для перевірки кожного елемента и додавання до свого масиву.
Поверни свій новий масив з підходящими числами як результат.


Візьми код нижче і встав після оголошення своєї функції для перевірки коректності її роботи. У консоль будуть виведені результати її роботи.



console.log(filterArray([1, 2, 3, 4, 5], 3)); // [4, 5]
console.log(filterArray([1, 2, 3, 4, 5], 4)); // [5]
console.log(filterArray([1, 2, 3, 4, 5], 5)); // []
console.log(filterArray([12, 24, 8, 41, 76], 38)); // [41, 76]
console.log(filterArray([12, 24, 8, 41, 76], 20)); // [24, 41, 76]

Залиш цей код для перевірки ментором.



На що буде звертати увагу ментор при перевірці:



Оголошена функція filterArray(numbers, value)
Виклик функції filterArray([1, 2, 3, 4, 5], 3) повертає [4, 5]
Виклик функції filterArray([1, 2, 3, 4, 5], 4) повертає [5]
Виклик функції filterArray([1, 2, 3, 4, 5], 5) повертає []
Виклик функції filterArray([12, 24, 8, 41, 76], 38) повертає [41, 76]
Виклик функції filterArray([12, 24, 8, 41, 76], 20) повертає [24, 41, 76]
Виклик функції filterArray() з випадковим масивом і числом повертає правильний масив